#!/bin/bash

set -u

function usage() {
  echo "unit_test <test_name> <generation> "
}

if [[ "$#" -ne 2 ]]; then
  usage
  exit 1
fi
basename=$1
generation=$2


progname=""
if [[ $generation == "1" ]];then
  progname="minigo"
elif [[ $generation == "2" ]]; then
  progname="minigo2"
elif [[ $generation == "0" ]]; then
  progname="go"
else
  usage
  exit 1
fi



out_dir=/tmp/out
out_dir_as=/tmp/tmpfs/out
mkdir -p $out_dir $out_dir_as

as_file=$out_dir_as/${basename}.${generation}.s
src=t/$basename/*.go
expected=t/expected/${basename}.txt
bin_file=$out_dir/${basename}.bin
obj_file=$out_dir_as/${basename}.o

actual=$out_dir/actual.txt
# for os.Args
ARGS=t/data/sample.txt

function run_unit_test {
    echo -n "./unit_test.sh $progname $basename ... "
    rm -f $actual
    if [[ $progname == "go" ]];then
      # official go
      go run $src $ARGS > $actual
      diff -u $expected $actual
    else
      ./${progname} $src > $as_file
      as -o $obj_file $as_file
      # gave up direct invocation of "ld"
      # https://stackoverflow.com/questions/33970159/bash-a-out-no-such-file-or-directory-on-running-executable-produced-by-ld
      ld -o $bin_file $obj_file
      $bin_file $ARGS > $actual
      diff -u $expected $actual
    fi
    if [[ $? -ne 0 ]];then
        echo failed
        return 1
    else
        echo ok
        return 0
    fi
}

run_unit_test
